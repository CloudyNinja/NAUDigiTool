/*
 * Created on Jun 27, 2003
 *
 * To change the template for this generated file go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
package tracker;

import java.util.StringTokenizer;

/**,
 * @author Owner
 *
 * To change the template for this generated type comment go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
public class KarnaughRecord extends UserRecord {

	private static String[] LABELS = {"userid","logins",
									"lv1-points","lv1-attempts","lv1-errors",
									"lv2-points","lv2-attempts","lv2-errors",
									"lv3-points","lv3-attempts","lv3-errors",
									"lv4-points","lv4-attempts","lv4-errors",
									"lv5-points","lv5-attempts","lv5-errors",
									"lv6-points","lv6-attempts","lv6-errors"};
	private static int NUM_OF_LEVELS = 6;
	private static int NUM_OF_ERRORS = 12;
	private int logins = 0;
	private int[] points = new int[NUM_OF_LEVELS];
	private int[] attempts = new int[NUM_OF_LEVELS];
	private int[][] levelInfo = new int[NUM_OF_LEVELS][NUM_OF_ERRORS];
	
	public KarnaughRecord(String id) {
		super(id);
		for(int i=0;i<levelInfo.length;i++){
			for(int j=0;j<levelInfo[0].length;j++)
				levelInfo[i][j] = 0;
		}
	}
	public int getNumberOfDataFields(){
		return LABELS.length;
	}
	
	public String getDataFieldLabel(int column){
		return LABELS[column];
	}
	
	public void setDataField(int column, String data){
		if (column == 0){
			return;
		}
		else if(column == 1){
			logins = Integer.parseInt(data);
		}
		else{
			int level = (int) ((column+1)/3);
			int field = (column+1) - (level*3);
			if (field == 0)
				points[level-1] = Integer.parseInt(data);
			else if (field == 1)
				attempts[level-1] = Integer.parseInt(data);
			else
				setLevelInfo(level,data);
		}
	}
	
	public String getDataField(int column){
		if (column == 0)
			return getUserID();
		else if(column == 1)
			return new String(""+logins);
		else{
			int level = (int) ((column+1)/3);
			int field = (column+1) - (level*3);
			if (field == 0)
				return new String("" + points[level-1]);
			else if (field == 1)
				return new String("" + attempts[level-1]);
			else
				return getLevelInfo(level);
		}
	}
	
	private void setLevelInfo(int level,String info){
		level--;
		StringTokenizer st = new StringTokenizer(info,":");
		for(int i = 0;i < levelInfo[level].length;i++)
			levelInfo[level][i] = Integer.parseInt(st.nextToken());
	}
	
	private String getLevelInfo(int level){
		level--;
		StringBuffer buffer = new StringBuffer();
		buffer.append(levelInfo[level][0]);
		for(int i = 1; i < levelInfo[level].length;i++){
			buffer.append(":").append(levelInfo[level][i]);
		}
		return buffer.toString();
	}
	
	public int getData(int level,int field){
		return levelInfo[level-1][field-1];
	}
	
	public void incrementData(int level,int field){
		levelInfo[level-1][field-1]++;
	}
	
	public int getLogins(){
		return logins;
	}
	
	public void incrementLogins(){
		logins++;	
	}
	
	public int getAttempts(int level){
		return attempts[level-1];
	}
	
	public void incrementAttempts(int level){
		attempts[level-1]++;
	}
	
	public int getPoints(int level){
		return points[level-1];
	}
	
	public void incrementPoints(int level, int amount){
		points[level-1] += amount;
	}
	
	public int getTotalPoints(){
		int total = 0;
		for (int i=0;i<NUM_OF_LEVELS;i++){
			total += (i+1) * points[i];
		}
		return total;
	}
	public int getDCOverflow(int level){
		return getData(level,1);
	}
	
	public void incrementDCOverflow(int level){
		incrementData(level,1);
	}
	
	public int getDCUnderflow(int level){
		return getData(level,2);
	}
	
	public void incrementDCUnderflow(int level){
		incrementData(level,2);
	}
	
	public int getGreyCodeError(int level){
		return getData(level,3);
	}
	
	public void incrementGreyCodeError(int level){
		incrementData(level,3);
	}
	
	public int getInvalidSelection(int level){
		return getData(level,4);
	}
	
	public void incrementInvalidSelection(int level){
		incrementData(level,4);
	}
	
	public int getInvalidSize(int level){
		return getData(level,5);
	}
	
	public void incrementInvalidSize(int level){
		incrementData(level,5);
	}
	
	public int getNotMinimized(int level){
		return getData(level,6);
	}
	
	public void incrementNotMinimized(int level){
		incrementData(level,6);
	}
	
	public int getNotSelected(int level){
		return getData(level,7);
	}
	
	public void incrementNotSelected(int level){
		incrementData(level,7);
	}
	
	public int getOrientaionError(int level){
		return getData(level,8);
	}
	
	public void incrementOrientationError(int level){
		incrementData(level,8);
	}
	
	public int getSpansCornerError(int level){
		return getData(level,9);
	}
	
	public void incrementSpansCornerError(int level){
		incrementData(level,9);
	}
	
	public int getSpansEdgeError(int level){
		return getData(level,10);
	}
	
	public void incrementSpansEdgeError(int level){
		incrementData(level,10);
	}
	
	public int getSpansLayerError(int level){
		return getData(level,11);
	}
	
	public void incrementSpansLayerError(int level){
		incrementData(level,11);
	}
	
	public int getTypoError(int level){
		return getData(level,12);
	}
	
	public void incrementTypoError(int level){
		incrementData(level,12);
	}
}